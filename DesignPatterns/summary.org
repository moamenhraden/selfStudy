#+TITLE: Desing Patterns by Mosh 
* Memento Pattern  
used to add *undo* mechanism functionality to a calss  
my Solution : 
#+BEGIN_SRC java 
import java.util.Stack;

/*
 * problem with this solution :
 * if we add a new field in the future
 * we have to change the list to store the
 * history (previous values)  of the two instance variables
 * or we have to add a new list for the new instance
 * variable.
 * => this design is not scalable
 *
 * MyEditor has multiple responsibilities
 * 1 - editor
 * 2 - state management
 * 3 - history
 *
 * solution : encapsulation
 * a class has only  one responsibility
 * => separate responsibilities in deferent classes.
 *
 * to solve the scalability problem
 * we can store the the content of
 * the editor in state obj
 * in this way when we add a new field
 * we have to change only the state class
 *
 * ====
 * this is the momento pattern
 * the abstract names of the classes
 * - originator : editor
 * - momento : state
 * - caretaker : history
 */


public class MyEditor {
    private Stack<String> history;
    private String content;

    public MyEditor(){
        history = new Stack<>();
    }

    public MyEditor(String content) {
        this.content = content;
        history = new Stack<>();
    }

    public void undo(){
        this.content = this.history.pop();
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.history.push(this.content);
        this.content = content;
    }


    @Override
    public String toString() {
        return "MyEditor{" +
                "content='" + content + '\'' +
                '}';
    }
}

#+END_SRC
the Solution :  
#+BEGIN_SRC java 
import java.util.Stack;

// entry point 
public class Main{
    public static void main(String[] args) {
        var ed = new Editor();
        var h = new History();
        ed.setContent("hallo from moamen");
        h.push(ed.createState());
        System.out.println(ed);
        ed.setContent("hallo from kenan");
        h.push(ed.createState());
        System.out.println(ed);
        ed.setContent("hallo from imam");
        System.out.println(ed);
        // undo
        ed.restoreState(h.pop());
        System.out.println(ed);

        // undo 2
        ed.restoreState(h.pop());
        System.out.println(ed);
    }
}

////////////define momento api ///////////////////////

// ~ editor
interface Originator<T>{
    T createState();
    void restoreState(T prevState);
}

// ~ history
interface CareTaker<T>{
    void push(T state);
    T pop();
}

// Memento should not have an Interface
// because it is just a data-container
// it should not have any functionality



/////////////////// implementation //////////////////////////


class Editor implements Originator<Editor.EditorState> {
    private String content;
    public Editor(){

    }

    public Editor(String content) {
        this.content = content;
    }


    public EditorState createState(){
        return new EditorState(this.content);
    }

    public void restoreState(EditorState state){
        this.content = state.getContent();
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Override
    public String toString() {
        return "Editor{" +
                "content='" + content + '\'' +
                '}';
    }

    // this is innerclass because
    // it has implementation details
    // note : you can also define EditorState as top-level class
    class EditorState{
        // state must be immutable.
        private final String content;

        EditorState(String content) {
            this.content = content;
        }

        public String getContent() {
            return content;
        }
    }
}



class History implements CareTaker<Editor.EditorState>{
    private Stack<Editor.EditorState> states;

    public History(){
        this.states = new Stack<Editor.EditorState>();
    }

    public void push(Editor.EditorState state){
        this.states.push(state);
    }

    public Editor.EditorState pop(){
        return this.states.pop();
    }
}
#+END_SRC

* State Pattern 
** problem : 
- software not extensible 
- if you want to add extra functionality you have to change 
the code in multiple places. 
- not maintainable 
#+BEGIN_SRC java
public class Problem {
    public static void main(String[] args) {

    }
}

// constants
enum ToolType{
    SELECTION,
    BRUSH,
    ERASER
}

// problem with this approach
// it is not extensible
// if you want to add a new functionality
// then you have to do multiple changes in the code

class canvas {

    private ToolType currentTool;

    public void mouseDown(){
        if(currentTool == ToolType.BRUSH){
            System.out.println("brush");
        }else if (currentTool == ToolType.SELECTION){
            System.out.println("selection");
        }else if (currentTool == ToolType.ERASER){
            System.out.println("eraser");
        }
    }

    public void mouseUP(){
        if(currentTool == ToolType.BRUSH){
            System.out.println("brush");
        }else if (currentTool == ToolType.SELECTION){
            System.out.println("selection");
        }else if (currentTool == ToolType.ERASER){
            System.out.println("eraser");
        }
    }
}


#+END_SRC
goal : behave different depending on the current state
** my solution 
=> polymorphism 
#+BEGIN_SRC java
public class MySolution {
    public static void main(String[] args) {
        var can = new Canvas();
        can.setTool(new Eraser());
        can.mouseDown();
    }
}


interface Tool {
    void mouseDown();
    void mouseUp();
}

class Eraser implements Tool{

    @Override
    public void mouseDown() {
        System.out.println("Eraser:mouseDown");
    }

    @Override
    public void mouseUp() {
        System.out.println("Eraser:mouseUp");
    }
}


class Brush implements Tool{

    @Override
    public void mouseDown() {
        System.out.println("Bruh:mouseDown");
    }

    @Override
    public void mouseUp() {
        System.out.println("Brush:mouseUp");
    }
}


class Selection implements Tool{

    @Override
    public void mouseDown() {
        System.out.println("selection:mouseDown");
    }

    @Override
    public void mouseUp() {
        System.out.println("selection:mouseUp");
    }
}


class Canvas{
        private Tool tool;

        public void mouseDown(){
            tool.mouseDown();
        }

        public void mouseUp(){
            tool.mouseUp();
        }

        public void setTool(Tool tool){
            this.tool = tool;
    }
}
#+END_SRC
the solution of mosh is the same 
i wrote only my solution. 
* Iterator Pattern 
** problem 
the problem with this approach is that 
the methods used to retrieve Items from a Collection
can be different between different classes
to use a certain class i should always know which methods
should i use to iterate over the its items.  

#+BEGIN_SRC java 
public class Problem {
    public static void main(String[] args) {
        var list = new MyList<Integer>();
        list.push(10);
        list.push(20);
        //System.out.println(list.pop());
        //System.out.println(list.pop());

        for(int i = 0 ; i < list.size(); i++){
            System.out.println(list.get(i));
        }

    }
}

class MyList<T>{
    private int capacity ;
    private T [] arr;
    private int index;

    public MyList(){
        this(10);
    }

    public MyList(int capacity) {
        this.capacity = capacity;
        this.arr = (T[]) new Object[capacity];
        this.index = 0 ;
    }

    public void push(T el){
        this.arr[this.index++] = el ;
    }

    public T pop(){
        if(this.index > 0 ){
            return this.arr[--this.index];
        }else{
            return null;
        }
    }

    public T get(int index){
        if(index > this.index){
            throw new IndexOutOfBoundsException();
        }
        return this.arr[index];
    }

    public int size(){
        return this.index;
    }
}

#+END_SRC
** my solution 1 
we can define methods like 
- get(int index):T 
or 
- next(): T 
- hastNext():boolean

the problem with this solution 
the class now has know more then one reponsibility 
*the single reponsibility principal* 
** my solution 2 
to avoid having a class with multiple reponsibilities we can 
define a new class which has the reponsibility of iterating over *MyList* class
to make the solution general solution ( iterate over all collection classes with the same methods) 
we can define Iterator interface and implement it for *MyList* class. 
since the Implementation of the Iterator interface depends on 
the implemention of the *MyList* class it's a good practice to implement 
the Iterator interface as innerclass of the class *MyList* 
#+BEGIN_SRC java 
public class Solution {
    public static void main(String[] args) {
        var list = new MyList2<String>();
        list.push("hallo");
        list.push("hallo2");
        list.push("hallo3");
        Iterator<String> it = list.iterate();
        while(it.hasNext()){
            System.out.println(it.next());
        }
    }
}

interface Iterator<T>{
    T next();
    boolean hasNext();
}


class MyList2<T>{
    private int capacity ;
    private T [] arr;
    private int index;

    public MyList2(){
        this(10);
    }

    public MyList2(int capacity) {
        this.capacity = capacity;
        this.arr = (T[]) new Object[capacity];
        this.index = 0 ;
    }

    public void push(T el){
        this.arr[this.index++] = el ;
    }

    public T pop(){
        if(this.index > 0 ){
            return this.arr[--this.index];
        }else{
            return null;
        }
    }

    public T get(int index){
        if(index > this.index){
            throw new IndexOutOfBoundsException();
        }
        return this.arr[index];
    }

    public int size(){
        return this.index;
    }

    public Iterator<T> iterate(){
        return new MyIterator(this.arr, this.index);
    }

    private class MyIterator implements Iterator<T>{

        private int size;
        private T list[];
        private int index;


        private MyIterator(T list[], int size){
            this.size = size;
            this.list = list;
            this.index = 0 ;
        }

        @Override
        public T next() {
            return this.list[index++];
        }

        @Override
        public boolean hasNext() {
            return this.index < this.size ? true : false;
        }
    }
}
#+END_SRC
* Strategy Pattern
